// Generated using `moon info`, DON'T EDIT IT
package "Kaida-Amethyst/llvm/IR"

import(
  "Kaida-Amethyst/llvm/unsafe"
)

// Values

// Errors
pub suberror BasicBlockHasNoParentError String
impl Show for BasicBlockHasNoParentError

pub suberror BuilderError {
  UnsetPosition
  ValueTypeError(String)
  InValidInsertPoint(String)
  BitwidthError(String)
  InValidArgument(String)
  UnImplemented(String)
}
impl Show for BuilderError

pub suberror InValidOperation String
impl Show for InValidOperation

pub suberror InValidTypeError String
impl Show for InValidTypeError

pub suberror IndexOutOfBounds String
impl Show for IndexOutOfBounds

pub suberror InterpreterError {
  CreateInterpreterFailed(String)
}
impl Show for InterpreterError

pub suberror SetBodyForNonOpaqueStruct String
impl Show for SetBodyForNonOpaqueStruct

pub suberror SwitchInstError {
  InValidSwitchCaseValue(String)
}

pub suberror WriteBitCodeToFileFailed String
impl Show for WriteBitCodeToFileFailed

// Types and methods
pub enum AbstractTypeEnum {
  VoidType(VoidType)
  LabelType(LabelType)
  MetadataType(MetadataType)
  TokenType(TokenType)
  FunctionType(FunctionType)
}
impl Show for AbstractTypeEnum

pub struct AddressSpace(UInt)
fn AddressSpace::inner(Self) -> UInt
fn AddressSpace::new(UInt) -> Self
impl Default for AddressSpace
impl Eq for AddressSpace
impl Hash for AddressSpace
impl Show for AddressSpace

pub enum AggregateTypeEnum {
  StructType(StructType)
  ArrayType(ArrayType)
  VectorType(VectorType)
  ScalableVectorType(ScalableVectorType)
}
fn AggregateTypeEnum::asTypeClass(Self) -> &Type
fn AggregateTypeEnum::toTypeEnum(Self) -> TypeEnum
impl Eq for AggregateTypeEnum
impl Show for AggregateTypeEnum

pub struct AllocaInst(@unsafe.LLVMValueRef)
fn AllocaInst::getAllocatedType(Self) -> &Type
fn AllocaInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for AllocaInst
impl Instruction for AllocaInst
impl Value for AllocaInst
impl Show for AllocaInst

pub struct Argument {
  value_ref : @unsafe.LLVMValueRef
  idx : Int
}
fn Argument::addAttr(Self, ParamAttr) -> Unit
fn Argument::getFunction(Self) -> Function
fn Argument::getName(Self) -> String
fn Argument::removeAttr(Self, ParamAttr) -> Unit
fn Argument::setName(Self, String) -> Unit
impl Value for Argument
impl Show for Argument

pub struct ArrayType(@unsafe.LLVMTypeRef)
fn ArrayType::getElementCount(Self) -> Int
fn ArrayType::getElementType(Self) -> &Type
fn ArrayType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for ArrayType
impl Type for ArrayType
impl Eq for ArrayType
impl Show for ArrayType

pub struct Attribute(@unsafe.LLVMAttributeRef)
fn Attribute::inner(Self) -> @unsafe.LLVMAttributeRef

pub struct BFloatType(@unsafe.LLVMTypeRef)
fn BFloatType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for BFloatType
impl PrimitiveType for BFloatType
impl Type for BFloatType
impl Eq for BFloatType
impl Show for BFloatType

pub struct BasicBlock(@unsafe.LLVMBasicBlockRef)
fn BasicBlock::eraseFromParent(Self) -> Unit raise
fn BasicBlock::getContext(Self) -> Context
fn BasicBlock::getFirstInst(Self) -> &Instruction?
fn BasicBlock::getLastInst(Self) -> &Instruction?
fn BasicBlock::getName(Self) -> String
fn BasicBlock::getNextBasicBlock(Self) -> Self?
fn BasicBlock::getParent(Self) -> Function?
fn BasicBlock::getPreviousBasicBlock(Self) -> Self?
fn BasicBlock::getTerminator(Self) -> &Instruction?
fn BasicBlock::inner(Self) -> @unsafe.LLVMBasicBlockRef
fn BasicBlock::moveAfter(Self, Self) -> Unit raise
fn BasicBlock::moveBefore(Self, Self) -> Unit raise
fn BasicBlock::removeFromParent(Self) -> Unit raise
fn BasicBlock::setName(Self, String) -> Unit
impl InsertPoint for BasicBlock
impl Value for BasicBlock
impl Show for BasicBlock

pub struct BinaryInst(@unsafe.LLVMValueRef)
fn BinaryInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for BinaryInst
impl Instruction for BinaryInst
impl Value for BinaryInst
impl Show for BinaryInst

pub struct BranchInst(@unsafe.LLVMValueRef)
fn BranchInst::getNumSuccessors(Self) -> Int
fn BranchInst::getSuccessor(Self, Int) -> BasicBlock?
fn BranchInst::inner(Self) -> @unsafe.LLVMValueRef
fn BranchInst::isConditional(Self) -> Bool
#callsite(autofill(loc))
fn BranchInst::setCondition(Self, &Value, loc~ : SourceLoc) -> Unit raise
#callsite(autofill(loc))
fn BranchInst::setSuccessor(Self, Int, BasicBlock, loc~ : SourceLoc) -> Unit raise
impl InsertPoint for BranchInst
impl Instruction for BranchInst
impl Value for BranchInst
impl Show for BranchInst

pub struct CallInst(@unsafe.LLVMValueRef)
fn CallInst::getTailCallKind(Self) -> TailCallKind
fn CallInst::inner(Self) -> @unsafe.LLVMValueRef
fn CallInst::isTailCall(Self) -> Bool
fn CallInst::removeTailCall(Self) -> Unit
fn CallInst::setTailCall(Self) -> Unit
fn CallInst::setTailCallKind(Self, TailCallKind) -> Unit
impl InsertPoint for CallInst
impl Instruction for CallInst
impl Value for CallInst
impl Show for CallInst

pub struct CastInst(@unsafe.LLVMValueRef)
fn CastInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for CastInst
impl Instruction for CastInst
impl Value for CastInst
impl Show for CastInst

pub struct ConstantArray(@unsafe.LLVMValueRef)
fn ConstantArray::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantArray
impl Value for ConstantArray
impl Show for ConstantArray

pub enum ConstantEnum {
  ConstantInt(ConstantInt)
  ConstantFP(ConstantFP)
  ConstantPointerNull(ConstantPointerNull)
  ConstantArray(ConstantArray)
  ConstantStruct(ConstantStruct)
  ConstantVector(ConstantVector)
  UndefValue(UndefValue)
  PoisonValue(PoisonValue)
}

pub struct ConstantFP(@unsafe.LLVMValueRef)
fn ConstantFP::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantFP
impl Value for ConstantFP
impl Show for ConstantFP

pub struct ConstantInt(@unsafe.LLVMValueRef)
fn ConstantInt::inner(Self) -> @unsafe.LLVMValueRef
fn ConstantInt::to_int(Self) -> Int
fn ConstantInt::to_uint(Self) -> UInt
impl Constant for ConstantInt
impl Value for ConstantInt
impl Show for ConstantInt

pub struct ConstantPointerNull(@unsafe.LLVMValueRef)
fn ConstantPointerNull::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantPointerNull
impl Value for ConstantPointerNull
impl Show for ConstantPointerNull

pub struct ConstantStruct(@unsafe.LLVMValueRef)
fn ConstantStruct::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantStruct
impl Value for ConstantStruct
impl Show for ConstantStruct

pub struct ConstantVector(@unsafe.LLVMValueRef)
fn ConstantVector::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantVector
impl Value for ConstantVector
impl Show for ConstantVector

pub struct Context(@unsafe.LLVMContextRef)
fn Context::addModule(Self, String) -> Module
fn Context::createBuilder(Self) -> IRBuilder
fn Context::drop(Self) -> Unit
fn Context::getArrayType(Self, &Type, Int) -> ArrayType
fn Context::getBFloatTy(Self) -> BFloatType
fn Context::getConstArray(Self, &Type, Array[&Constant]) -> ConstantArray
fn Context::getConstDouble(Self, Double) -> ConstantFP
fn Context::getConstFalse(Self) -> ConstantInt
fn Context::getConstFloat(Self, Float) -> ConstantFP
fn Context::getConstInt16(Self, Int) -> ConstantInt
fn Context::getConstInt32(Self, Int) -> ConstantInt
fn Context::getConstInt64(Self, Int64) -> ConstantInt
fn Context::getConstInt8(Self, Int) -> ConstantInt
fn Context::getConstPointerNull(Self, &Type) -> ConstantPointerNull
fn Context::getConstStruct(Self, Array[&Constant], isPacked? : Bool) -> ConstantStruct
fn Context::getConstTrue(Self) -> ConstantInt
fn Context::getConstUInt16(Self, UInt16) -> ConstantInt
fn Context::getConstUInt32(Self, UInt) -> ConstantInt
fn Context::getConstUInt64(Self, UInt64) -> ConstantInt
fn Context::getConstUInt8(Self, Int) -> ConstantInt
fn Context::getConstVector(Self, Array[&Constant]) -> ConstantVector
fn Context::getConstZeroDouble(Self, isNegative~ : Bool) -> ConstantFP
fn Context::getConstZeroFloat(Self, isNegative~ : Bool) -> ConstantFP
fn Context::getDoubleTy(Self) -> DoubleType
fn Context::getFP128Ty(Self) -> FP128Type
fn[T : Type] Context::getFixedVectorType(Self, T, Int) -> VectorType
fn Context::getFloatTy(Self) -> FloatType
fn Context::getFunctionType(Self, &Type, Array[&Type], isVarArg? : Bool) -> FunctionType
fn Context::getHalfTy(Self) -> HalfType
fn Context::getInt16Ty(Self) -> Int16Type
fn Context::getInt1Ty(Self) -> Int1Type
fn Context::getInt32Ty(Self) -> Int32Type
fn Context::getInt64Ty(Self) -> Int64Type
fn Context::getInt8Ty(Self) -> Int8Type
fn Context::getLabelTy(Self) -> LabelType
fn Context::getMetadataTy(Self) -> MetadataType
fn Context::getPoision(Self, &Type) -> PoisonValue
fn Context::getPtrTy(Self, addressSpace? : AddressSpace) -> PointerType
fn Context::getScalableVectorType(Self, &Type, UInt) -> ScalableVectorType
fn Context::getStructType(Self, Array[&Type], isPacked? : Bool, name? : String) -> StructType
fn Context::getStructTypeByName(Self, String) -> StructType?
fn Context::getTokenTy(Self) -> TokenType
fn Context::getUndef(Self, &Type) -> UndefValue
fn Context::getVoidTy(Self) -> VoidType
fn Context::inner(Self) -> @unsafe.LLVMContextRef
fn Context::new() -> Self
impl Eq for Context

pub struct DataLayout(@unsafe.LLVMTargetDataRef)
fn DataLayout::getTypeAlignment(Self, &Type) -> Int
fn DataLayout::getTypeAllocSize(Self, &Type) -> Int
fn DataLayout::getTypeSizeInBits(Self, &Type) -> Int
fn DataLayout::getTypeStoreSize(Self, &Type) -> Int
fn DataLayout::inner(Self) -> @unsafe.LLVMTargetDataRef

pub struct DoubleType(@unsafe.LLVMTypeRef)
fn DoubleType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for DoubleType
impl PrimitiveType for DoubleType
impl Type for DoubleType
impl Eq for DoubleType
impl Show for DoubleType

pub struct ExtractValueInst(@unsafe.LLVMValueRef)
fn ExtractValueInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for ExtractValueInst
impl Instruction for ExtractValueInst
impl Value for ExtractValueInst
impl Show for ExtractValueInst

pub struct FCmpInst(@unsafe.LLVMValueRef)
fn FCmpInst::getPredicate(Self) -> FloatPredicate
fn FCmpInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for FCmpInst
impl Instruction for FCmpInst
impl Value for FCmpInst
impl Show for FCmpInst

pub struct FP128Type(@unsafe.LLVMTypeRef)
fn FP128Type::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for FP128Type
impl PrimitiveType for FP128Type
impl Type for FP128Type
impl Eq for FP128Type
impl Show for FP128Type

pub enum FPTypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
}
fn FPTypeEnum::asTypeClass(Self) -> &Type
fn FPTypeEnum::getFPMantissaWidth(Self) -> UInt
impl Eq for FPTypeEnum
impl Show for FPTypeEnum

pub(all) enum FastMathFlags {
  AllowReassoc
  NoNaNs
  NoInfs
  NoSignedZeros
  AllowReciprocal
  AllowContract
  ApproxFunc
}
fn FastMathFlags::to_llvm(Self) -> @unsafe.LLVMFastMathFlags

pub(all) enum FloatPredicate {
  OEQ
  OGT
  OGE
  OLT
  OLE
  ONE
  ORD
  UEQ
  UGT
  UGE
  ULT
  ULE
  UNE
  UNO
  True
  False
}

pub struct FloatType(@unsafe.LLVMTypeRef)
fn FloatType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for FloatType
impl PrimitiveType for FloatType
impl Type for FloatType
impl Eq for FloatType
impl Show for FloatType

pub(all) enum FnAttr {
  AllocAlign
  AllocaPtr
  AlwaysInline
  Builtin
  Cold
  Convergent
  NoUnwind
  NoInline
  NoAlias
  AllocSize(Int)
}
impl Eq for FnAttr

pub struct Function(@unsafe.LLVMValueRef)
fn Function::addBasicBlock(Self, name? : String, before? : BasicBlock?) -> BasicBlock
fn Function::addFnAttr(Self, FnAttr) -> Unit
fn Function::addRetAttr(Self, RetAttr) -> Unit
fn Function::countFnAttrs(Self) -> Int
fn Function::getArg(Self, Int) -> Argument?
fn Function::getArgs(Self) -> Array[Argument]
fn Function::getBasicBlocks(Self) -> Array[BasicBlock]
fn Function::getName(Self) -> String
fn Function::getNumArgs(Self) -> Int
fn Function::getNumBasicBlocks(Self) -> Int
fn Function::getType(Self) -> FunctionType
fn Function::inner(Self) -> @unsafe.LLVMValueRef
fn Function::removeFnAttr(Self, FnAttr) -> Unit
fn Function::removeRetAttr(Self, RetAttr) -> Unit
fn Function::setName(Self, String) -> Unit
impl GlobalValue for Function
impl Value for Function
impl Show for Function

pub struct FunctionType(@unsafe.LLVMTypeRef)
fn FunctionType::getNumParams(Self) -> Int
fn FunctionType::getParamType(Self, Int) -> &Type?
fn FunctionType::getParamTypes(Self) -> Array[&Type]
fn FunctionType::getReturnType(Self) -> &Type
fn FunctionType::inner(Self) -> @unsafe.LLVMTypeRef
fn FunctionType::isVarArg(Self) -> Bool
fn FunctionType::numOfParams(Self) -> Int
fn FunctionType::params(Self) -> Array[&Type]
impl AbstractType for FunctionType
impl Type for FunctionType
impl Eq for FunctionType
impl Show for FunctionType

pub struct GenericValue(@unsafe.LLVMGenericValueRef)
fn GenericValue::inner(Self) -> @unsafe.LLVMGenericValueRef
fn GenericValue::toInt(Self) -> Int
fn GenericValue::toInt64(Self) -> Int64
fn GenericValue::toUInt(Self) -> UInt
fn GenericValue::toUInt64(Self) -> UInt64

pub struct GetElementPtrInst(@unsafe.LLVMValueRef)
fn GetElementPtrInst::getSourceElementType(Self) -> &Type
fn GetElementPtrInst::inner(Self) -> @unsafe.LLVMValueRef
fn GetElementPtrInst::isInBounds(Self) -> Bool
fn GetElementPtrInst::removeInBounds(Self) -> Unit
fn GetElementPtrInst::setInBounds(Self) -> Unit
impl InsertPoint for GetElementPtrInst
impl Instruction for GetElementPtrInst
impl Value for GetElementPtrInst
impl Show for GetElementPtrInst

pub struct GlobalConstant(@unsafe.LLVMValueRef)
fn GlobalConstant::inner(Self) -> @unsafe.LLVMValueRef
impl GlobalValue for GlobalConstant
impl Value for GlobalConstant
impl Show for GlobalConstant

pub enum GlobalEnum {
  Function(Function)
  GlobalVariable(GlobalVariable)
  GlobalConstant(GlobalConstant)
}

pub struct GlobalVariable(@unsafe.LLVMValueRef)
fn GlobalVariable::inner(Self) -> @unsafe.LLVMValueRef
impl GlobalValue for GlobalVariable
impl Value for GlobalVariable
impl Show for GlobalVariable

pub struct HalfType(@unsafe.LLVMTypeRef)
fn HalfType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for HalfType
impl PrimitiveType for HalfType
impl Type for HalfType
impl Eq for HalfType
impl Show for HalfType

pub struct ICmpInst(@unsafe.LLVMValueRef)
fn ICmpInst::getPredicate(Self) -> IntPredicate
fn ICmpInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for ICmpInst
impl Instruction for ICmpInst
impl Value for ICmpInst
impl Show for ICmpInst

pub struct IRBuilder {
  builder_ref : @unsafe.LLVMBuilderRef
  // private fields
}
#callsite(autofill(loc))
fn IRBuilder::createAShr(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createAdd(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createAlloca(Self, &Type, name? : String) -> AllocaInst raise
#callsite(autofill(loc))
fn IRBuilder::createAnd(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createBitCast(Self, &Value, &Type, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createBr(Self, BasicBlock) -> BranchInst raise
#callsite(autofill(loc))
fn IRBuilder::createCall(Self, Function, Array[&Value], name? : String, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createCallPtr(Self, &Value, FunctionType, Array[&Value], name? : String, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createCondBr(Self, &Value, BasicBlock, BasicBlock, loc~ : SourceLoc) -> BranchInst raise
#callsite(autofill(loc))
fn IRBuilder::createExactSDiv(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createExactUDiv(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createExtractValue(Self, &Value, Int, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFAdd(Self, &Value, &Value, name? : String, fast_math? : Array[FastMathFlags], loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmp(Self, FloatPredicate, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpOEQ(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpOGE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpOGT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpOLE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpOLT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpONE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpORD(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpUEQ(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpUGE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpUGT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpULE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpULT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFCmpUNE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFDiv(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFMul(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFNeg(Self, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFPExt(Self, &Value, &FPType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFPToSI(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFPToUI(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFPTrunc(Self, &Value, &FPType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFRem(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFSub(Self, &Value, &Value, name? : String, fast_math? : Array[FastMathFlags], loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createFree(Self, &Value, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createGEP(Self, &Value, &Type, Array[&Value], name? : String, inbounds? : Bool, loc~ : SourceLoc) -> GetElementPtrInst raise
fn IRBuilder::createGlobalString(Self, String, name? : String) -> GlobalConstant raise
#callsite(autofill(loc))
fn IRBuilder::createICmp(Self, IntPredicate, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpEQ(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpNE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpSGE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpSGT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpSLE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpSLT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpUGE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpUGT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpULE(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createICmpULT(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createInsertValue(Self, &Value, &Value, Int, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createIntToPtr(Self, &Value, name? : String) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createLShr(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createLoad(Self, &Type, &Value, name? : String) -> LoadInst raise
#callsite(autofill(loc))
fn IRBuilder::createMalloc(Self, &Type, name? : String, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createMemCpy(Self, &Value, Int, &Value, Int, &Value, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createMemMove(Self, &Value, Int, &Value, Int, &Value, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createMemSet(Self, &Value, &Value, &Value, Int, loc~ : SourceLoc) -> CallInst raise
#callsite(autofill(loc))
fn IRBuilder::createMul(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNSWAdd(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNSWMul(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNSWSub(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNUWAdd(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNUWMul(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNUWSub(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createNot(Self, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createOr(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createPHI(Self, &Type, name? : String) -> PHINode raise
#callsite(autofill(loc))
fn IRBuilder::createPtrDiff(Self, &Type, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createPtrToInt(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::createRet(Self, &Value) -> ReturnInst raise
fn IRBuilder::createRetVoid(Self) -> ReturnInst raise
#callsite(autofill(loc))
fn IRBuilder::createSDiv(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createSExt(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createSIToFP(Self, &Value, &FPType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createSRem(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createSelect(Self, &Value, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createShl(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createStore(Self, &Value, &Value, loc~ : SourceLoc) -> StoreInst raise
#callsite(autofill(loc))
fn IRBuilder::createSub(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createSwitch(Self, &Value, BasicBlock, loc~ : SourceLoc) -> SwitchInst raise
#callsite(autofill(loc))
fn IRBuilder::createTrunc(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createUDiv(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createUIToFP(Self, &Value, &FPType, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createURem(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createXor(Self, &Value, &Value, name? : String, loc~ : SourceLoc) -> &Value raise
#callsite(autofill(loc))
fn IRBuilder::createZExt(Self, &Value, &IntegerType, name? : String, loc~ : SourceLoc) -> &Value raise
fn IRBuilder::getInsertBlock(Self) -> BasicBlock?
fn IRBuilder::inner(Self) -> @unsafe.LLVMBuilderRef
fn[T : InsertPoint] IRBuilder::setInsertPoint(Self, T) -> Unit raise

pub struct InsertValueInst(@unsafe.LLVMValueRef)
fn InsertValueInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for InsertValueInst
impl Instruction for InsertValueInst
impl Value for InsertValueInst
impl Show for InsertValueInst

pub enum InstructionEnum {
  AllocaInst(AllocaInst)
  LoadInst(LoadInst)
  StoreInst(StoreInst)
  CastInst(CastInst)
  UnaryInst(UnaryInst)
  BinaryInst(BinaryInst)
  ICmpInst(ICmpInst)
  FCmpInst(FCmpInst)
  GetElementPtrInst(GetElementPtrInst)
  SelectInst(SelectInst)
  ExtractValueInst(ExtractValueInst)
  InsertValueInst(InsertValueInst)
  PHINode(PHINode)
  ReturnInst(ReturnInst)
  BranchInst(BranchInst)
  SwitchInst(SwitchInst)
  CallInst(CallInst)
}

pub struct Int16Type(@unsafe.LLVMTypeRef)
fn Int16Type::inner(Self) -> @unsafe.LLVMTypeRef
impl IntegerType for Int16Type
impl PrimitiveType for Int16Type
impl Type for Int16Type
impl Eq for Int16Type
impl Show for Int16Type

pub struct Int1Type(@unsafe.LLVMTypeRef)
fn Int1Type::inner(Self) -> @unsafe.LLVMTypeRef
impl IntegerType for Int1Type
impl PrimitiveType for Int1Type
impl Type for Int1Type
impl Eq for Int1Type
impl Show for Int1Type

pub struct Int32Type(@unsafe.LLVMTypeRef)
fn Int32Type::inner(Self) -> @unsafe.LLVMTypeRef
impl IntegerType for Int32Type
impl PrimitiveType for Int32Type
impl Type for Int32Type
impl Eq for Int32Type
impl Show for Int32Type

pub struct Int64Type(@unsafe.LLVMTypeRef)
fn Int64Type::inner(Self) -> @unsafe.LLVMTypeRef
impl IntegerType for Int64Type
impl PrimitiveType for Int64Type
impl Type for Int64Type
impl Eq for Int64Type
impl Show for Int64Type

pub struct Int8Type(@unsafe.LLVMTypeRef)
fn Int8Type::inner(Self) -> @unsafe.LLVMTypeRef
impl IntegerType for Int8Type
impl PrimitiveType for Int8Type
impl Type for Int8Type
impl Eq for Int8Type
impl Show for Int8Type

pub(all) enum IntPredicate {
  EQ
  NE
  SGT
  SGE
  SLT
  SLE
  UGT
  UGE
  ULT
  ULE
}

pub enum IntegerTypeEnum {
  Int1Type(Int1Type)
  Int8Type(Int8Type)
  Int16Type(Int16Type)
  Int32Type(Int32Type)
  Int64Type(Int64Type)
}
fn IntegerTypeEnum::asTypeClass(Self) -> &Type
fn IntegerTypeEnum::getBitWidth(Self) -> UInt
impl Eq for IntegerTypeEnum
impl Show for IntegerTypeEnum

pub struct Interpreter {
  engine : @unsafe.LLVMExecutionEngineRef
  mod : Module
  ctx : Context
}
fn Interpreter::createGenericValueDouble(Self, Double) -> GenericValue
fn Interpreter::createGenericValueFloat(Self, Float) -> GenericValue
fn Interpreter::createGenericValueInt(Self, Int) -> GenericValue
fn Interpreter::createGenericValueInt64(Self, Int64) -> GenericValue
fn Interpreter::createGenericValueUInt(Self, UInt) -> GenericValue
fn Interpreter::createGenericValueUInt64(Self, UInt64) -> GenericValue
fn Interpreter::inner(Self) -> @unsafe.LLVMExecutionEngineRef
fn Interpreter::runFunction(Self, Function, Array[GenericValue]) -> GenericValue

pub struct LabelType(@unsafe.LLVMTypeRef)
fn LabelType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for LabelType
impl Type for LabelType
impl Eq for LabelType
impl Show for LabelType

pub(all) enum Linkage {
  ExternalLinkage
  AvailableExternallyLinkage
  LinkOnceAnyLinkage
  LinkOnceODRLinkage
  LinkOnceODRAutoHideLinkage
  WeakAnyLinkage
  WeakODRLinkage
  AppendingLinkage
  InternalLinkage
  PrivateLinkage
  DLLImportLinkage
  DLLExportLinkage
  ExternalWeakLinkage
  GhostLinkage
  CommonLinkage
  LinkerPrivateLinkage
  LinkerPrivateWeakLinkage
}

pub struct LoadInst(@unsafe.LLVMValueRef)
fn LoadInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for LoadInst
impl Instruction for LoadInst
impl Value for LoadInst
impl Show for LoadInst

pub struct MetadataType(@unsafe.LLVMTypeRef)
fn MetadataType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for MetadataType
impl Type for MetadataType
impl Eq for MetadataType
impl Show for MetadataType

pub struct Module(@unsafe.LLVMModuleRef)
fn Module::addFunction(Self, FunctionType, String, linkage? : Linkage) -> Function
fn Module::addGlobalConstant(Self, &Type, String, &Constant, linkage? : Linkage) -> GlobalConstant
fn Module::addGlobalVariable(Self, &Type, String, initializer? : &Constant, linkage? : Linkage) -> GlobalVariable
fn Module::createInterpreter(Self) -> Interpreter raise
fn Module::dump(Self) -> Unit
fn Module::getContext(Self) -> Context
fn Module::getDataLayout(Self) -> DataLayout
fn Module::getFirstFunction(Self) -> Function?
fn Module::getFunction(Self, String) -> Function?
fn Module::getFunctions(Self) -> Array[Function]
fn Module::getLastFunction(Self) -> Function?
fn Module::getName(Self) -> String
fn Module::getSourceFileName(Self) -> String
fn Module::inner(Self) -> @unsafe.LLVMModuleRef
fn Module::setDataLayout(Self, String) -> Unit
fn Module::setDefaultDataLayout(Self) -> Unit
fn Module::setName(Self, String) -> Unit
fn Module::setSourceFileName(Self, String) -> Unit
fn Module::writeBitCodeToFile(Self, String) -> Unit raise
impl Show for Module

pub struct PHINode(@unsafe.LLVMValueRef)
fn PHINode::addIncoming(Self, &Value, BasicBlock) -> Unit
fn PHINode::countIncoming(Self) -> Int
fn PHINode::getIncomingBlock(Self, Int) -> BasicBlock?
fn PHINode::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for PHINode
impl Instruction for PHINode
impl Value for PHINode
impl Show for PHINode

pub(all) enum ParamAttr {
  Alignment(Int)
  NoAlias
  NonNull
  InReg
}
impl Eq for ParamAttr

pub struct PointerType(@unsafe.LLVMTypeRef)
fn PointerType::getAddressSpace(Self) -> AddressSpace
fn PointerType::inner(Self) -> @unsafe.LLVMTypeRef
fn PointerType::isLoadableOrStorableType(&Type) -> Bool
impl Type for PointerType
impl Eq for PointerType
impl Show for PointerType

pub struct PoisonValue(@unsafe.LLVMValueRef)
fn PoisonValue::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for PoisonValue
impl Value for PoisonValue
impl Show for PoisonValue

type PositionState
impl Eq for PositionState
impl Show for PositionState

pub enum PrimitiveTypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
  Int1Type(Int1Type)
  Int8Type(Int8Type)
  Int16Type(Int16Type)
  Int32Type(Int32Type)
  Int64Type(Int64Type)
}
impl Eq for PrimitiveTypeEnum
impl Show for PrimitiveTypeEnum

pub(all) enum RetAttr {
  NoAlias
  NonNull
  InReg
}
impl Eq for RetAttr

pub struct ReturnInst(@unsafe.LLVMValueRef)
fn ReturnInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for ReturnInst
impl Instruction for ReturnInst
impl Value for ReturnInst
impl Show for ReturnInst

pub struct ScalableVectorType(@unsafe.LLVMTypeRef)
fn ScalableVectorType::getElementCount(Self) -> Int
fn ScalableVectorType::getElementType(Self) -> &Type
fn ScalableVectorType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for ScalableVectorType
impl Type for ScalableVectorType
impl Eq for ScalableVectorType
impl Show for ScalableVectorType

pub struct SelectInst(@unsafe.LLVMValueRef)
fn SelectInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for SelectInst
impl Instruction for SelectInst
impl Value for SelectInst
impl Show for SelectInst

pub struct StoreInst(@unsafe.LLVMValueRef)
fn StoreInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for StoreInst
impl Instruction for StoreInst
impl Value for StoreInst
impl Show for StoreInst

pub struct StructType(@unsafe.LLVMTypeRef)
fn StructType::elements(Self) -> Array[&Type]
fn StructType::getElementType(Self, Int) -> &Type?
fn StructType::inner(Self) -> @unsafe.LLVMTypeRef
fn StructType::isLiteral(Self) -> Bool
fn StructType::isOpaque(Self) -> Bool
fn StructType::isPacked(Self) -> Bool
fn StructType::isSized(Self) -> Bool
fn StructType::numOfElements(Self) -> Int
fn StructType::setBody(Self, Array[&Type], isPacked? : Bool) -> Unit raise
impl AggregateType for StructType
impl Type for StructType
impl Eq for StructType
impl Show for StructType

pub struct SwitchInst(@unsafe.LLVMValueRef)
fn SwitchInst::addCase(Self, &Value, BasicBlock) -> Unit raise
fn SwitchInst::getNumSuccessors(Self) -> Int
fn SwitchInst::getSuccessor(Self, Int) -> BasicBlock?
fn SwitchInst::inner(Self) -> @unsafe.LLVMValueRef
#callsite(autofill(loc))
fn SwitchInst::setSuccessor(Self, Int, BasicBlock, loc~ : SourceLoc) -> Unit raise
impl InsertPoint for SwitchInst
impl Instruction for SwitchInst
impl Value for SwitchInst
impl Show for SwitchInst

pub(all) enum TailCallKind {
  None
  Tail
  MustTail
  NoTail
}
impl Show for TailCallKind

pub struct TokenType(@unsafe.LLVMTypeRef)
fn TokenType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for TokenType
impl Type for TokenType
impl Eq for TokenType
impl Show for TokenType

pub enum TypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
  Int1Type(Int1Type)
  Int8Type(Int8Type)
  Int16Type(Int16Type)
  Int32Type(Int32Type)
  Int64Type(Int64Type)
  VoidType(VoidType)
  LabelType(LabelType)
  MetadataType(MetadataType)
  TokenType(TokenType)
  FunctionType(FunctionType)
  StructType(StructType)
  ArrayType(ArrayType)
  VectorType(VectorType)
  ScalableVectorType(ScalableVectorType)
  PointerType(PointerType)
}
fn TypeEnum::asTypeClass(Self) -> &Type
impl Eq for TypeEnum
impl Show for TypeEnum

pub struct UnaryInst(@unsafe.LLVMValueRef)
fn UnaryInst::inner(Self) -> @unsafe.LLVMValueRef
impl InsertPoint for UnaryInst
impl Instruction for UnaryInst
impl Value for UnaryInst
impl Show for UnaryInst

pub struct UndefValue(@unsafe.LLVMValueRef)
fn UndefValue::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for UndefValue
impl Value for UndefValue
impl Show for UndefValue

pub(all) enum UnnamedAddr {
  NoUnnamedAddr
  Local
  Global
}

pub enum ValueEnum {
  Function(Function)
  GlobalVariable(GlobalVariable)
  GlobalConstant(GlobalConstant)
  ConstantInt(ConstantInt)
  ConstantFP(ConstantFP)
  ConstantPointerNull(ConstantPointerNull)
  ConstantArray(ConstantArray)
  ConstantVector(ConstantVector)
  ConstantStruct(ConstantStruct)
  UndefValue(UndefValue)
  PoisonValue(PoisonValue)
  Argument(Argument)
  BasicBlock(BasicBlock)
  AllocaInst(AllocaInst)
  LoadInst(LoadInst)
  StoreInst(StoreInst)
  CastInst(CastInst)
  UnaryInst(UnaryInst)
  BinaryInst(BinaryInst)
  ICmpInst(ICmpInst)
  FCmpInst(FCmpInst)
  GetElementPtrInst(GetElementPtrInst)
  SelectInst(SelectInst)
  ExtractValueInst(ExtractValueInst)
  InsertValueInst(InsertValueInst)
  PHINode(PHINode)
  ReturnInst(ReturnInst)
  BranchInst(BranchInst)
  SwitchInst(SwitchInst)
  CallInst(CallInst)
}

pub struct VectorType(@unsafe.LLVMTypeRef)
fn VectorType::getElementCount(Self) -> Int
fn VectorType::getElementType(Self) -> &Type
fn VectorType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for VectorType
impl Type for VectorType
impl Eq for VectorType
impl Show for VectorType

pub struct VoidType(@unsafe.LLVMTypeRef)
fn VoidType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for VoidType
impl Type for VoidType
impl Eq for VoidType
impl Show for VoidType

// Type aliases
pub typealias @unsafe.LLVMValueRef as ValueRef

// Traits
pub trait AbstractType : Type {
  asAbstractTypeEnum(Self) -> AbstractTypeEnum
}

pub trait AggregateType : Type {
  asAggregateTypeEnum(Self) -> AggregateTypeEnum
  getElementType(Self, Int) -> &Type?
}

pub trait Constant : Value {
  asConstEnum(Self) -> ConstantEnum
}

pub trait FPType : PrimitiveType {
  asFPTypeEnum(Self) -> FPTypeEnum
  getFPMantissaWidth(Self) -> UInt
}

pub trait GlobalValue : Value {
  asGlobalEnum(Self) -> GlobalEnum
  getLinkage(Self) -> Linkage
  setLinkage(Self, Linkage) -> Unit
  getUnnamedAddr(Self) -> UnnamedAddr
  setUnnamedAddr(Self, UnnamedAddr) -> Unit
  removeUnnamedAddr(Self) -> Unit
}

trait InsertPoint

pub trait Instruction : Value {
  asInstEnum(Self) -> InstructionEnum
  getParentBasicBlock(Self) -> BasicBlock?
  getNextInst(Self) -> &Instruction?
  getPrevInst(Self) -> &Instruction?
  removeFromParent(Self) -> Unit
  eraseFromParent(Self) -> Unit
  getNumArgOperands(Self) -> Int
}

pub trait IntegerType : PrimitiveType {
  asIntegerTypeEnum(Self) -> IntegerTypeEnum
  getExtendedType(Self) -> &IntegerType?
}

pub trait PrimitiveType : Type {
  asPrimitiveTypeEnum(Self) -> PrimitiveTypeEnum
  getBitWidth(Self) -> Int
}

pub trait Type : Show {
  getTypeRef(Self) -> @unsafe.LLVMTypeRef
  asTypeEnum(Self) -> TypeEnum
  getContext(Self) -> Context
  is16bitFPTy(Self) -> Bool
  isIEEELikeFPTy(Self) -> Bool
  isFloatingPointTy(Self) -> Bool
  isScalableTargetExtTy(Self) -> Bool
  isScalableTy(Self) -> Bool
  isFPOrFPVectorTy(Self) -> Bool
  isIntOrIntVectorTy(Self) -> Bool
  isIntOrPtrTy(Self) -> Bool
  isPtrOrPtrVectorTy(Self) -> Bool
  isEmptyTy(Self) -> Bool
  isFirstClassType(Self) -> Bool
  isSingleValueType(Self) -> Bool
  isAggregateType(Self) -> Bool
  isSized(Self) -> Bool
  sizeOf(Self) -> &Value?
  isValidGEPType(Self) -> Bool
  getScalarType(Self) -> &Type
  tryAsIntType(Self) -> &IntegerType?
  tryAsIntTypeEnum(Self) -> IntegerTypeEnum?
  tryAsFPType(Self) -> &FPType?
  tryAsFPTypeEnum(Self) -> FPTypeEnum?
  tryAsPrimitiveType(Self) -> &PrimitiveType?
  tryAsPrimitiveTypeEnum(Self) -> PrimitiveTypeEnum?
  tryAsAggregateType(Self) -> &AggregateType?
  tryAsAggregateTypeEnum(Self) -> AggregateTypeEnum?
  tryAsAbstractType(Self) -> &AbstractType?
  tryAsAbstractTypeEnum(Self) -> AbstractTypeEnum?
}

pub trait Value : Show {
  getValueRef(Self) -> @unsafe.LLVMValueRef
  asValueEnum(Self) -> ValueEnum
  getType(Self) -> &Type
  getContext(Self) -> Context
  getValueName(Self) -> String?
  setValueName(Self, String) -> Unit
  replaceAllUsesWith(Self, &Value) -> Unit
  tryAsConst(Self) -> &Constant?
  tryAsConstEnum(Self) -> ConstantEnum?
}

