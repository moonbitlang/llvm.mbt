package "Kaida-Amethyst/llvm"

import(
  "Kaida-Amethyst/llvm/unsafe"
)

// Values

// Types and methods
pub enum AbstractTypeEnum {
  VoidType(VoidType)
  LabelType(LabelType)
  MetadataType(MetadataType)
  TokenType(TokenType)
  FunctionType(FunctionType)
}
impl Show for AbstractTypeEnum

pub type AddressSpace UInt
fn AddressSpace::inner(Self) -> UInt
fn AddressSpace::new(UInt) -> Self
impl Default for AddressSpace
impl Eq for AddressSpace
impl Hash for AddressSpace
impl Show for AddressSpace

pub enum AggregateTypeEnum {
  StructType(StructType)
  ArrayType(ArrayType)
  VectorType(VectorType)
  ScalableVectorType(ScalableVectorType)
}
fn AggregateTypeEnum::asTypeClass(Self) -> &Type
fn AggregateTypeEnum::toTypeEnum(Self) -> TypeEnum
impl Eq for AggregateTypeEnum
impl Show for AggregateTypeEnum

pub type AllocaInst @unsafe.LLVMValueRef
fn AllocaInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for AllocaInst
impl Value for AllocaInst
impl Show for AllocaInst

pub struct Argument {
  value_ref : @unsafe.LLVMValueRef
  idx : Int
}
fn Argument::addAttr(Self, ParamAttr) -> Unit
fn Argument::getFunction(Self) -> Function
fn Argument::getName(Self) -> String
fn Argument::removeAttr(Self, ParamAttr) -> Unit
fn Argument::setName(Self, String) -> Unit
impl Value for Argument
impl Show for Argument

pub type ArrayType @unsafe.LLVMTypeRef
fn ArrayType::getElementCount(Self) -> Int
fn ArrayType::getElementType(Self) -> &Type
fn ArrayType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for ArrayType
impl Type for ArrayType
impl Eq for ArrayType
impl Show for ArrayType

pub type Attribute @unsafe.LLVMAttributeRef
fn Attribute::inner(Self) -> @unsafe.LLVMAttributeRef

pub type BFloatType @unsafe.LLVMTypeRef
fn BFloatType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for BFloatType
impl PrimitiveType for BFloatType
impl Type for BFloatType
impl Eq for BFloatType
impl Show for BFloatType

pub type BasicBlock @unsafe.LLVMBasicBlockRef
fn BasicBlock::getContext(Self) -> Context
fn BasicBlock::getFirstInst(Self) -> &Instruction?
fn BasicBlock::getLastInst(Self) -> &Instruction?
fn BasicBlock::getName(Self) -> String
fn BasicBlock::getNextBasicBlock(Self) -> Self?
fn BasicBlock::getParent(Self) -> Function?
fn BasicBlock::getPreviousBasicBlock(Self) -> Self?
fn BasicBlock::getTerminator(Self) -> &Instruction?
fn BasicBlock::inner(Self) -> @unsafe.LLVMBasicBlockRef
fn BasicBlock::moveAfter(Self, Self) -> Unit raise
fn BasicBlock::moveBefore(Self, Self) -> Unit raise
fn BasicBlock::removeFromParent(Self) -> Unit raise
fn BasicBlock::setName(Self, String) -> Unit
impl InsertPoint for BasicBlock
impl Value for BasicBlock
impl Show for BasicBlock

pub suberror BasicBlockHasNoParentError String
impl Show for BasicBlockHasNoParentError

pub type BinaryInst @unsafe.LLVMValueRef
fn BinaryInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for BinaryInst
impl Value for BinaryInst
impl Show for BinaryInst

pub type BranchInst @unsafe.LLVMValueRef
fn BranchInst::getNumSuccessors(Self) -> Int
fn BranchInst::inner(Self) -> @unsafe.LLVMValueRef
fn BranchInst::isConditional(Self) -> Bool
impl Instruction for BranchInst
impl Value for BranchInst
impl Show for BranchInst

pub suberror BuilderError {
  UnsetPosition
  ValueTypeError(String)
  InValidInsertPoint(String)
  BitwidthError(String)
  InValidArgument(String)
  UnImplemented(String)
}

pub type CallInst @unsafe.LLVMValueRef
fn CallInst::getTailCallKind(Self) -> TailCallKind
fn CallInst::inner(Self) -> @unsafe.LLVMValueRef
fn CallInst::removeTailCall(Self) -> Unit
fn CallInst::setTailCall(Self) -> Unit
fn CallInst::setTailCallKind(Self, TailCallKind) -> Unit
impl Instruction for CallInst
impl Value for CallInst
impl Show for CallInst

pub type CastInst @unsafe.LLVMValueRef
fn CastInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for CastInst
impl Value for CastInst
impl Show for CastInst

pub type ConstantArray @unsafe.LLVMValueRef
fn ConstantArray::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantArray
impl Value for ConstantArray
impl Show for ConstantArray

pub enum ConstantEnum {
  ConstantInt(ConstantInt)
  ConstantFP(ConstantFP)
  ConstantPointerNull(ConstantPointerNull)
  ConstantArray(ConstantArray)
  ConstantStruct(ConstantStruct)
  ConstantVector(ConstantVector)
  UndefValue(UndefValue)
  PoisonValue(PoisonValue)
}

pub type ConstantFP @unsafe.LLVMValueRef
fn ConstantFP::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantFP
impl Value for ConstantFP
impl Show for ConstantFP

pub type ConstantInt @unsafe.LLVMValueRef
fn ConstantInt::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantInt
impl Value for ConstantInt
impl Show for ConstantInt

pub type ConstantPointerNull @unsafe.LLVMValueRef
fn ConstantPointerNull::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantPointerNull
impl Value for ConstantPointerNull
impl Show for ConstantPointerNull

pub type ConstantStruct @unsafe.LLVMValueRef
fn ConstantStruct::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantStruct
impl Value for ConstantStruct
impl Show for ConstantStruct

pub type ConstantVector @unsafe.LLVMValueRef
fn ConstantVector::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for ConstantVector
impl Value for ConstantVector
impl Show for ConstantVector

pub type Context @unsafe.LLVMContextRef
fn Context::addModule(Self, String) -> Module
fn Context::createBuilder(Self) -> IRBuilder
fn Context::drop(Self) -> Unit
fn Context::getArrayType(Self, &Type, Int) -> ArrayType
fn Context::getBFloatTy(Self) -> BFloatType
fn Context::getConstArray(Self, &Type, Array[&Constant]) -> ConstantArray
fn Context::getConstDouble(Self, Double) -> ConstantFP
fn Context::getConstFalse(Self) -> ConstantInt
fn Context::getConstFloat(Self, Float) -> ConstantFP
fn Context::getConstInt16(Self, Int) -> ConstantInt
fn Context::getConstInt32(Self, Int) -> ConstantInt
fn Context::getConstInt64(Self, Int64) -> ConstantInt
fn Context::getConstInt8(Self, Int) -> ConstantInt
fn Context::getConstPointerNull(Self, &Type) -> ConstantPointerNull
fn Context::getConstStruct(Self, Array[&Constant], isPacked~ : Bool = ..) -> ConstantStruct
fn Context::getConstTrue(Self) -> ConstantInt
fn Context::getConstUInt16(Self, UInt16) -> ConstantInt
fn Context::getConstUInt32(Self, UInt) -> ConstantInt
fn Context::getConstUInt64(Self, UInt64) -> ConstantInt
fn Context::getConstUInt8(Self, Int) -> ConstantInt
fn Context::getConstVector(Self, Array[&Constant]) -> ConstantVector
fn Context::getDoubleTy(Self) -> DoubleType
fn Context::getFP128Ty(Self) -> FP128Type
fn[T : Type] Context::getFixedVectorType(Self, T, Int) -> VectorType
fn Context::getFloatTy(Self) -> FloatType
fn Context::getFunctionType(Self, &Type, Array[&Type], isVarArg~ : Bool = ..) -> FunctionType
fn Context::getHalfTy(Self) -> HalfType
fn Context::getInt128Ty(Self) -> IntType
fn Context::getInt16Ty(Self) -> IntType
fn Context::getInt1Ty(Self) -> IntType
fn Context::getInt32Ty(Self) -> IntType
fn Context::getInt64Ty(Self) -> IntType
fn Context::getInt8Ty(Self) -> IntType
fn Context::getLabelTy(Self) -> LabelType
fn Context::getMetadataTy(Self) -> MetadataType
fn Context::getPoision(Self, &Type) -> PoisonValue
fn Context::getPtrTy(Self, addressSpace~ : AddressSpace = ..) -> PointerType
fn Context::getScalableVectorType(Self, &Type, UInt) -> ScalableVectorType
fn Context::getStructType(Self, Array[&Type], isPacked~ : Bool = .., name~ : String = ..) -> StructType
fn Context::getStructTypeByName(Self, String) -> StructType?
fn Context::getTokenTy(Self) -> TokenType
fn Context::getUndef(Self, &Type) -> UndefValue
fn Context::getVoidTy(Self) -> VoidType
fn Context::inner(Self) -> @unsafe.LLVMContextRef
fn Context::new() -> Self
impl Eq for Context

pub type DataLayout @unsafe.LLVMTargetDataRef
fn DataLayout::getTypeAlignment(Self, &Type) -> Int
fn DataLayout::getTypeAllocSize(Self, &Type) -> Int
fn DataLayout::getTypeSizeInBits(Self, &Type) -> Int
fn DataLayout::getTypeStoreSize(Self, &Type) -> Int
fn DataLayout::inner(Self) -> @unsafe.LLVMTargetDataRef

pub type DoubleType @unsafe.LLVMTypeRef
fn DoubleType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for DoubleType
impl PrimitiveType for DoubleType
impl Type for DoubleType
impl Eq for DoubleType
impl Show for DoubleType

pub type ExtractValueInst @unsafe.LLVMValueRef
fn ExtractValueInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for ExtractValueInst
impl Value for ExtractValueInst
impl Show for ExtractValueInst

pub type FCmpInst @unsafe.LLVMValueRef
fn FCmpInst::getPredicate(Self) -> FloatPredicate
fn FCmpInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for FCmpInst
impl Value for FCmpInst
impl Show for FCmpInst

pub type FP128Type @unsafe.LLVMTypeRef
fn FP128Type::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for FP128Type
impl PrimitiveType for FP128Type
impl Type for FP128Type
impl Eq for FP128Type
impl Show for FP128Type

pub enum FPTypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
}
fn FPTypeEnum::asTypeClass(Self) -> &Type
fn FPTypeEnum::getBitWidth(Self) -> UInt
fn FPTypeEnum::getFPMantissaWidth(Self) -> UInt
impl Eq for FPTypeEnum
impl Show for FPTypeEnum

pub(all) enum FastMathFlags {
  AllowReassoc
  NoNaNs
  NoInfs
  NoSignedZeros
  AllowReciprocal
  AllowContract
  ApproxFunc
}
fn FastMathFlags::to_llvm(Self) -> @unsafe.LLVMFastMathFlags

pub(all) enum FloatPredicate {
  OEQ
  OGT
  OGE
  OLT
  OLE
  ONE
  ORD
  UEQ
  UGT
  UGE
  ULT
  ULE
  UNE
  UNO
  True
  False
}

pub type FloatType @unsafe.LLVMTypeRef
fn FloatType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for FloatType
impl PrimitiveType for FloatType
impl Type for FloatType
impl Eq for FloatType
impl Show for FloatType

pub(all) enum FnAttr {
  AllocAlign
  AllocaPtr
  AlwaysInline
  Builtin
  Cold
  Convergent
  NoUnwind
  NoInline
  NoAlias
  AllocSize(Int)
}
impl Eq for FnAttr

pub type Function @unsafe.LLVMValueRef
fn Function::addBasicBlock(Self, name~ : String = ..) -> BasicBlock
fn Function::addFnAttr(Self, FnAttr) -> Unit
fn Function::addRetAttr(Self, RetAttr) -> Unit
fn Function::countFnAttrs(Self) -> Int
fn Function::getArg(Self, Int) -> Argument?
fn Function::getArgs(Self) -> Array[Argument]
fn Function::getBasicBlocks(Self) -> Array[BasicBlock]
fn Function::getName(Self) -> String
fn Function::getNumArgs(Self) -> Int
fn Function::getNumBasicBlocks(Self) -> Int
fn Function::getType(Self) -> FunctionType
fn Function::inner(Self) -> @unsafe.LLVMValueRef
fn Function::removeFnAttr(Self, FnAttr) -> Unit
fn Function::removeRetAttr(Self, RetAttr) -> Unit
impl Value for Function
impl Show for Function

pub type FunctionType @unsafe.LLVMTypeRef
fn FunctionType::getNumParams(Self) -> Int
fn FunctionType::getParamType(Self, Int) -> &Type?
fn FunctionType::getParamTypes(Self) -> Array[&Type]
fn FunctionType::getReturnType(Self) -> &Type
fn FunctionType::inner(Self) -> @unsafe.LLVMTypeRef
fn FunctionType::isVarArg(Self) -> Bool
fn FunctionType::numOfParams(Self) -> Int
fn FunctionType::params(Self) -> Array[&Type]
impl AbstractType for FunctionType
impl Type for FunctionType
impl Eq for FunctionType
impl Show for FunctionType

pub type GetElementPtrInst @unsafe.LLVMValueRef
fn GetElementPtrInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for GetElementPtrInst
impl Value for GetElementPtrInst
impl Show for GetElementPtrInst

pub type HalfType @unsafe.LLVMTypeRef
fn HalfType::inner(Self) -> @unsafe.LLVMTypeRef
impl FPType for HalfType
impl PrimitiveType for HalfType
impl Type for HalfType
impl Eq for HalfType
impl Show for HalfType

pub type ICmpInst @unsafe.LLVMValueRef
fn ICmpInst::getPredicate(Self) -> IntPredicate
fn ICmpInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for ICmpInst
impl Value for ICmpInst
impl Show for ICmpInst

pub struct IRBuilder {
  builder_ref : @unsafe.LLVMBuilderRef
  // private fields
}
fn IRBuilder::createAShr(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createAdd(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createAlloca(Self, &Type, name~ : String = ..) -> AllocaInst raise
fn IRBuilder::createAnd(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createBitCast(Self, &Value, &Type, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createBr(Self, BasicBlock) -> BranchInst raise
fn IRBuilder::createCall(Self, Function, Array[&Value], name~ : String = .., loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createCallPtr(Self, &Value, FunctionType, Array[&Value], name~ : String = .., loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createCondBr(Self, &Value, BasicBlock, BasicBlock, loc~ : SourceLoc = _) -> BranchInst raise
fn IRBuilder::createExactSDiv(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createExactUDiv(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createExtractValue(Self, &Value, Int, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFAdd(Self, &Value, &Value, name~ : String = .., fast_math~ : Array[FastMathFlags] = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFCmp(Self, FloatPredicate, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFDiv(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFMul(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFNeg(Self, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFPExt(Self, &Value, &FPType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFPToSI(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFPToUI(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFPTrunc(Self, &Value, &FPType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFRem(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFSub(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createFree(Self, &Value, loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createGEP(Self, &Value, &Type, Array[&Value], name~ : String = .., inbounds~ : Bool = .., loc~ : SourceLoc = _) -> GetElementPtrInst raise
fn IRBuilder::createICmp(Self, IntPredicate, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createInsertValue(Self, &Value, &Value, Int, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createIntToPtr(Self, &Value, PointerType, name~ : String = ..) -> &Value raise
fn IRBuilder::createLShr(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createLoad(Self, &Type, &Value, name~ : String = ..) -> LoadInst raise
fn IRBuilder::createMalloc(Self, &Type, name~ : String = .., loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createMemCpy(Self, &Value, Int, &Value, Int, &Value, loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createMemMove(Self, &Value, Int, &Value, Int, &Value, loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createMemSet(Self, &Value, &Value, &Value, Int, loc~ : SourceLoc = _) -> CallInst raise
fn IRBuilder::createMul(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNSWAdd(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNSWMul(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNSWSub(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNUWAdd(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNUWMul(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNUWSub(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createNot(Self, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createOr(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createPHI(Self, &Type, name~ : String = ..) -> PHINode raise
fn IRBuilder::createPtrDiff(Self, &Type, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createPtrToInt(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createRet(Self, &Value) -> ReturnInst raise
fn IRBuilder::createRetVoid(Self) -> ReturnInst raise
fn IRBuilder::createSDiv(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createSExt(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createSIToFP(Self, &Value, &FPType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createSRem(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createSelect(Self, &Value, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createShl(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createStore(Self, &Value, &Value, loc~ : SourceLoc = _) -> StoreInst raise
fn IRBuilder::createSub(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createSwitch(Self, &Value, BasicBlock, loc~ : SourceLoc = _) -> SwitchInst raise
fn IRBuilder::createTrunc(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createUDiv(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createUIToFP(Self, &Value, &FPType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createURem(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createXor(Self, &Value, &Value, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::createZExt(Self, &Value, IntType, name~ : String = .., loc~ : SourceLoc = _) -> &Value raise
fn IRBuilder::getInsertBlock(Self) -> BasicBlock?
fn IRBuilder::inner(Self) -> @unsafe.LLVMBuilderRef
fn[T : InsertPoint] IRBuilder::setInsertPoint(Self, T) -> Unit raise

pub suberror InValidTypeError String
impl Show for InValidTypeError

pub type InsertValueInst @unsafe.LLVMValueRef
fn InsertValueInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for InsertValueInst
impl Value for InsertValueInst
impl Show for InsertValueInst

pub enum InstructionEnum {
  AllocaInst(AllocaInst)
  LoadInst(LoadInst)
  StoreInst(StoreInst)
  CastInst(CastInst)
  UnaryInst(UnaryInst)
  BinaryInst(BinaryInst)
  ICmpInst(ICmpInst)
  FCmpInst(FCmpInst)
  GetElementPtrInst(GetElementPtrInst)
  SelectInst(SelectInst)
  ExtractValueInst(ExtractValueInst)
  InsertValueInst(InsertValueInst)
  PHINode(PHINode)
  ReturnInst(ReturnInst)
  BranchInst(BranchInst)
  SwitchInst(SwitchInst)
  CallInst(CallInst)
}

pub(all) enum IntPredicate {
  EQ
  NE
  SGT
  SGE
  SLT
  SLE
  UGT
  UGE
  ULT
  ULE
}

pub type IntType @unsafe.LLVMTypeRef
fn IntType::getBitWidth(Self) -> UInt
fn IntType::inner(Self) -> @unsafe.LLVMTypeRef
impl PrimitiveType for IntType
impl Type for IntType
impl Eq for IntType
impl Show for IntType

pub type LabelType @unsafe.LLVMTypeRef
fn LabelType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for LabelType
impl Type for LabelType
impl Eq for LabelType
impl Show for LabelType

pub type LoadInst @unsafe.LLVMValueRef
fn LoadInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for LoadInst
impl Value for LoadInst
impl Show for LoadInst

pub type MetadataType @unsafe.LLVMTypeRef
fn MetadataType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for MetadataType
impl Type for MetadataType
impl Eq for MetadataType
impl Show for MetadataType

pub type Module @unsafe.LLVMModuleRef
fn Module::addFunction(Self, FunctionType, String) -> Function
fn Module::dump(Self) -> Unit
fn Module::getContext(Self) -> Context
fn Module::getDataLayout(Self) -> DataLayout
fn Module::getFirstFunction(Self) -> Function?
fn Module::getFunction(Self, String) -> Function?
fn Module::getFunctions(Self) -> Array[Function]
fn Module::getLastFunction(Self) -> Function?
fn Module::getName(Self) -> String
fn Module::getSourceFileName(Self) -> String
fn Module::inner(Self) -> @unsafe.LLVMModuleRef
fn Module::setDataLayout(Self, String) -> Unit
fn Module::setName(Self, String) -> Unit
fn Module::setSourceFileName(Self, String) -> Unit
impl Show for Module

pub type PHINode @unsafe.LLVMValueRef
fn PHINode::addIncoming(Self, &Value, BasicBlock) -> Unit
fn PHINode::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for PHINode
impl Value for PHINode
impl Show for PHINode

pub(all) enum ParamAttr {
  Alignment(Int)
  NoAlias
  NonNull
  InReg
}
impl Eq for ParamAttr

pub type PointerType @unsafe.LLVMTypeRef
fn PointerType::getAddressSpace(Self) -> AddressSpace
fn PointerType::inner(Self) -> @unsafe.LLVMTypeRef
fn PointerType::isLoadableOrStorableType(&Type) -> Bool
impl Type for PointerType
impl Eq for PointerType
impl Show for PointerType

pub type PoisonValue @unsafe.LLVMValueRef
fn PoisonValue::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for PoisonValue
impl Value for PoisonValue
impl Show for PoisonValue

type PositionState
impl Eq for PositionState
impl Show for PositionState

pub enum PrimitiveTypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
  IntType(IntType)
}
fn PrimitiveTypeEnum::getBitWidth(Self) -> UInt
impl Eq for PrimitiveTypeEnum
impl Show for PrimitiveTypeEnum

pub(all) enum RetAttr {
  NoAlias
  NonNull
  InReg
}
impl Eq for RetAttr

pub type ReturnInst @unsafe.LLVMValueRef
fn ReturnInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for ReturnInst
impl Value for ReturnInst
impl Show for ReturnInst

pub type ScalableVectorType @unsafe.LLVMTypeRef
fn ScalableVectorType::getElementCount(Self) -> Int
fn ScalableVectorType::getElementType(Self) -> &Type
fn ScalableVectorType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for ScalableVectorType
impl Type for ScalableVectorType
impl Eq for ScalableVectorType
impl Show for ScalableVectorType

pub type SelectInst @unsafe.LLVMValueRef
fn SelectInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for SelectInst
impl Value for SelectInst
impl Show for SelectInst

pub suberror SetBodyForNonOpaqueStruct String
impl Show for SetBodyForNonOpaqueStruct

pub type StoreInst @unsafe.LLVMValueRef
fn StoreInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for StoreInst
impl Value for StoreInst
impl Show for StoreInst

pub type StructType @unsafe.LLVMTypeRef
fn StructType::elements(Self) -> Array[&Type]
fn StructType::getElementType(Self, Int) -> &Type?
fn StructType::inner(Self) -> @unsafe.LLVMTypeRef
fn StructType::isLiteral(Self) -> Bool
fn StructType::isOpaque(Self) -> Bool
fn StructType::isPacked(Self) -> Bool
fn StructType::isSized(Self) -> Bool
fn StructType::numOfElements(Self) -> Int
fn StructType::setBody(Self, Array[&Type], isPacked~ : Bool = ..) -> Unit raise
impl AggregateType for StructType
impl Type for StructType
impl Eq for StructType
impl Show for StructType

pub type SwitchInst @unsafe.LLVMValueRef
fn SwitchInst::addCase(Self, &Value, BasicBlock) -> Unit raise
fn SwitchInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for SwitchInst
impl Value for SwitchInst
impl Show for SwitchInst

pub suberror SwitchInstError {
  InValidSwitchCaseValue(String)
}

pub(all) enum TailCallKind {
  None
  Tail
  MustTail
  NoTail
}
impl Show for TailCallKind

pub type TokenType @unsafe.LLVMTypeRef
fn TokenType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for TokenType
impl Type for TokenType
impl Eq for TokenType
impl Show for TokenType

pub enum TypeEnum {
  HalfType(HalfType)
  BFloatType(BFloatType)
  FloatType(FloatType)
  DoubleType(DoubleType)
  FP128Type(FP128Type)
  IntType(IntType)
  VoidType(VoidType)
  LabelType(LabelType)
  MetadataType(MetadataType)
  TokenType(TokenType)
  FunctionType(FunctionType)
  StructType(StructType)
  ArrayType(ArrayType)
  VectorType(VectorType)
  ScalableVectorType(ScalableVectorType)
  PointerType(PointerType)
}
fn TypeEnum::asTypeClass(Self) -> &Type
impl Eq for TypeEnum
impl Show for TypeEnum

pub type UnaryInst @unsafe.LLVMValueRef
fn UnaryInst::inner(Self) -> @unsafe.LLVMValueRef
impl Instruction for UnaryInst
impl Value for UnaryInst
impl Show for UnaryInst

pub type UndefValue @unsafe.LLVMValueRef
fn UndefValue::inner(Self) -> @unsafe.LLVMValueRef
impl Constant for UndefValue
impl Value for UndefValue
impl Show for UndefValue

pub enum ValueEnum {
  Function(Function)
  ConstantInt(ConstantInt)
  ConstantFP(ConstantFP)
  ConstantPointerNull(ConstantPointerNull)
  ConstantArray(ConstantArray)
  ConstantVector(ConstantVector)
  ConstantStruct(ConstantStruct)
  UndefValue(UndefValue)
  PoisonValue(PoisonValue)
  Argument(Argument)
  BasicBlock(BasicBlock)
  AllocaInst(AllocaInst)
  LoadInst(LoadInst)
  StoreInst(StoreInst)
  CastInst(CastInst)
  UnaryInst(UnaryInst)
  BinaryInst(BinaryInst)
  ICmpInst(ICmpInst)
  FCmpInst(FCmpInst)
  GetElementPtrInst(GetElementPtrInst)
  SelectInst(SelectInst)
  ExtractValueInst(ExtractValueInst)
  InsertValueInst(InsertValueInst)
  PHINode(PHINode)
  ReturnInst(ReturnInst)
  BranchInst(BranchInst)
  SwitchInst(SwitchInst)
  CallInst(CallInst)
}

pub type VectorType @unsafe.LLVMTypeRef
fn VectorType::getElementCount(Self) -> Int
fn VectorType::getElementType(Self) -> &Type
fn VectorType::inner(Self) -> @unsafe.LLVMTypeRef
impl AggregateType for VectorType
impl Type for VectorType
impl Eq for VectorType
impl Show for VectorType

pub type VoidType @unsafe.LLVMTypeRef
fn VoidType::inner(Self) -> @unsafe.LLVMTypeRef
impl AbstractType for VoidType
impl Type for VoidType
impl Eq for VoidType
impl Show for VoidType

// Type aliases
pub typealias @unsafe.LLVMValueRef as ValueRef

// Traits
pub trait AbstractType : Type {
  asAbstractTypeEnum(Self) -> AbstractTypeEnum
}

pub trait AggregateType : Type {
  asAggregateTypeEnum(Self) -> AggregateTypeEnum
  getElementType(Self, Int) -> &Type?
}

pub trait Constant : Value {
  asConstEnum(Self) -> ConstantEnum
}

pub trait FPType : Type {
  asFPTypeEnum(Self) -> FPTypeEnum
  getFPMantissaWidth(Self) -> UInt
  getBitWidth(Self) -> UInt
}

trait InsertPoint
impl InsertPoint for &Instruction

pub trait Instruction : Value {
  asInstEnum(Self) -> InstructionEnum
  getParentBasicBlock(Self) -> BasicBlock?
  getNextInst(Self) -> &Instruction?
  getPrevInst(Self) -> &Instruction?
  removeFromParent(Self) -> Unit
  eraseFromParent(Self) -> Unit
  getNumArgOperands(Self) -> Int
}

pub trait PrimitiveType : Type {
  asPrimitiveTypeEnum(Self) -> PrimitiveTypeEnum
  getBitWidth(Self) -> UInt
}

pub trait Type : Show {
  getTypeRef(Self) -> @unsafe.LLVMTypeRef
  asTypeEnum(Self) -> TypeEnum
  getContext(Self) -> Context
  is16bitFPTy(Self) -> Bool
  isIEEELikeFPTy(Self) -> Bool
  isFloatingPointTy(Self) -> Bool
  isScalableTargetExtTy(Self) -> Bool
  isScalableTy(Self) -> Bool
  isFPOrFPVectorTy(Self) -> Bool
  isIntOrIntVectorTy(Self) -> Bool
  isIntOrPtrTy(Self) -> Bool
  isPtrOrPtrVectorTy(Self) -> Bool
  isEmptyTy(Self) -> Bool
  isFirstClassType(Self) -> Bool
  isSingleValueType(Self) -> Bool
  isAggregateType(Self) -> Bool
  isSized(Self) -> Bool
  isValidGEPType(Self) -> Bool
  getScalarType(Self) -> &Type
  tryAsFPType(Self) -> &FPType?
  tryAsFPTypeEnum(Self) -> FPTypeEnum?
  tryAsPrimitiveType(Self) -> &PrimitiveType?
  tryAsPrimitiveTypeEnum(Self) -> PrimitiveTypeEnum?
  tryAsAggregateType(Self) -> &AggregateType?
  tryAsAggregateTypeEnum(Self) -> AggregateTypeEnum?
  tryAsAbstractType(Self) -> &AbstractType?
  tryAsAbstractTypeEnum(Self) -> AbstractTypeEnum?
}

pub trait Value : Show {
  getValueRef(Self) -> @unsafe.LLVMValueRef
  asValueEnum(Self) -> ValueEnum
  getType(Self) -> &Type
  getContext(Self) -> Context
  getValueName(Self) -> String?
  setValueName(Self, String) -> Unit
  replaceAllUsesWith(Self, &Value) -> Unit
}

