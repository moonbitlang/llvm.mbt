name: check

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:

jobs:
  check:
    strategy:
      matrix:
        os:
          - name: ubuntu-latest
            version: stable
          - name: macos-latest
            version: stable
          - name: macos-13
            version: stable
          # - name: windows-latest
          #   version: stable

          # bleeding check 
          # 1. install latest toolchain 
          # 2. install latest core library from github.com
          - name: ubuntu-latest
            version: bleeding
          - name: macos-latest
            version: bleeding
          - name: macos-13
            version: bleeding
          # - name: windows-latest
          #   version: bleeding

      fail-fast: false
    runs-on: ${{ matrix.os.name }}
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      - name: download llvm-19 on ubuntu-latest
        if: ${{ matrix.os.name == 'ubuntu-latest' }}
        run: |
          sudo apt install llvm-19-dev -y

      - name: download llvm-19 on macos
        if: ${{ matrix.os.name == 'macos-latest' || matrix.os.name == 'macos-13' }}
        run: |
          brew install llvm@19

      - name: install stable version on unix
        if: ${{ matrix.os.name != 'windows-latest' && matrix.os.version == 'stable' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash

      - name: install stable version on windows
        if: ${{ matrix.os.name == 'windows-latest' && matrix.os.version == 'stable' }}
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex
          
      - name: install bleeding version on unix
        if: ${{ matrix.os.name != 'windows-latest' && matrix.os.version == 'bleeding' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash -s bleeding
        # passing bleeding as argument to unix.sh

      - name: install bleeding version on windows
        env:
          MOONBIT_INSTALL_VERSION: bleeding
        # set global env variable for powershell.ps1
        if: ${{ matrix.os.name == 'windows-latest' && matrix.os.version == 'bleeding' }}
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex

      - name: add env path on unix
        if: ${{ matrix.os.name != 'windows-latest' }}
        run: |
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: add env path on windows
        if: ${{ matrix.os.name == 'windows-latest' }}
        run: |
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
      
      - name: moon version
        run: |
          moon version --all
          moonrun --version
      
      - name: install module dependencies
        run: |
          moon update
          moon install

      - name: moon check
        run: moon check --target native

      # - name: moon info
      #   run: |
      #     moon info --target native
      #     git diff --exit-code

      # - name: format diff
      #   run: |
      #     moon fmt --block-style
      #     git diff --exit-code

      - name: Setup MSVC
        if: ${{ matrix.os.name == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set ulimit on unix
        if: ${{ matrix.os.name != 'windows-latest' }}
        run: |
          ulimit -s 8176

      - name: moon test
        run: |
          source ./.github/ci_env.sh 
          moon test --target native --release
        # each step uses different environment variable
        # don't separate `source env.sh` and `moon build`

      # # TODO: Add `--doc` option when all doc problems fixed.
      # - name: moon test --target native
      #   run: |
      #     source env.sh 
      #     moon test --target native

  moon-json-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: check `moon.*.json` format
        shell: bash
        run: |
          _passed=0;
          for f in $(find . -type f -name "moon.*.json"); do
            if ! jq '.' $f > /dev/null; then
              echo $f;
              _passed=1;
            fi
          done
          (exit $_passed)

  typo-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      FORCE_COLOR: 1
      TYPOS_VERSION: v1.19.0
    steps:
      - name: download typos
        run: curl -LsSf https://github.com/crate-ci/typos/releases/download/$TYPOS_VERSION/typos-$TYPOS_VERSION-x86_64-unknown-linux-musl.tar.gz | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: check typos
        run: typos
